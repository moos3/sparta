// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "service.proto" (package "service", syntax proto3)
// tslint:disable
import { ReportService } from "./service";
import type { CalculateRiskScoreResponse } from "./service";
import type { CalculateRiskScoreRequest } from "./service";
import type { GetReportByIdResponse } from "./service";
import type { GetReportByIdRequest } from "./service";
import type { ListReportsResponse } from "./service";
import type { ListReportsRequest } from "./service";
import type { GenerateReportResponse } from "./service";
import type { GenerateReportRequest } from "./service";
import { ScanService } from "./service";
import type { GetDNSScanResultByIDResponse } from "./service";
import type { GetDNSScanResultByIDRequest } from "./service";
import type { GetISCScanResultsByDomainResponse } from "./service";
import type { GetISCScanResultsByDomainRequest } from "./service";
import type { GetAbuseChScanResultsByDomainResponse } from "./service";
import type { GetAbuseChScanResultsByDomainRequest } from "./service";
import type { GetWhoisScanResultsByDomainResponse } from "./service";
import type { GetWhoisScanResultsByDomainRequest } from "./service";
import type { GetOTXScanResultsByDomainResponse } from "./service";
import type { GetOTXScanResultsByDomainRequest } from "./service";
import type { GetShodanScanResultsByDomainResponse } from "./service";
import type { GetShodanScanResultsByDomainRequest } from "./service";
import type { GetChaosScanResultsByDomainResponse } from "./service";
import type { GetChaosScanResultsByDomainRequest } from "./service";
import type { GetCrtShScanResultsByDomainResponse } from "./service";
import type { GetCrtShScanResultsByDomainRequest } from "./service";
import type { GetTLSScanResultsByDomainResponse } from "./service";
import type { GetTLSScanResultsByDomainRequest } from "./service";
import type { GetDNSScanResultsByDomainResponse } from "./service";
import type { GetDNSScanResultsByDomainRequest } from "./service";
import type { ScanISCResponse } from "./service";
import type { ScanISCRequest } from "./service";
import type { ScanAbuseChResponse } from "./service";
import type { ScanAbuseChRequest } from "./service";
import type { ScanWhoisResponse } from "./service";
import type { ScanWhoisRequest } from "./service";
import type { ScanOTXResponse } from "./service";
import type { ScanOTXRequest } from "./service";
import type { ScanShodanResponse } from "./service";
import type { ScanShodanRequest } from "./service";
import type { ScanChaosResponse } from "./service";
import type { ScanChaosRequest } from "./service";
import type { ScanCrtShResponse } from "./service";
import type { ScanCrtShRequest } from "./service";
import type { ScanTLSResponse } from "./service";
import type { ScanTLSRequest } from "./service";
import type { ScanDomainResponse } from "./service";
import type { ScanDomainRequest } from "./service";
import { UserService } from "./service";
import type { ChangePasswordResponse } from "./service";
import type { ChangePasswordRequest } from "./service";
import type { ListAPIKeysResponse } from "./service";
import type { ListAPIKeysRequest } from "./service";
import type { DeactivateAPIKeyResponse } from "./service";
import type { DeactivateAPIKeyRequest } from "./service";
import type { ActivateAPIKeyResponse } from "./service";
import type { ActivateAPIKeyRequest } from "./service";
import type { RotateAPIKeyResponse } from "./service";
import type { RotateAPIKeyRequest } from "./service";
import type { CreateAPIKeyResponse } from "./service";
import type { CreateAPIKeyRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthService } from "./service";
import type { ValidateInviteResponse } from "./service";
import type { ValidateInviteRequest } from "./service";
import type { InviteUserResponse } from "./service";
import type { InviteUserRequest } from "./service";
import type { LoginResponse } from "./service";
import type { LoginRequest } from "./service";
import type { ListUsersResponse } from "./service";
import type { ListUsersRequest } from "./service";
import type { DeleteUserResponse } from "./service";
import type { DeleteUserRequest } from "./service";
import type { UpdateUserResponse } from "./service";
import type { UpdateUserRequest } from "./service";
import type { GetUserResponse } from "./service";
import type { GetUserRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateUserResponse } from "./service";
import type { CreateUserRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
// Services definitions

/**
 * @generated from protobuf service service.AuthService
 */
export interface IAuthServiceClient {
    /**
     * @generated from protobuf rpc: CreateUser
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse>;
    /**
     * @generated from protobuf rpc: GetUser
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse>;
    /**
     * @generated from protobuf rpc: UpdateUser
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse>;
    /**
     * @generated from protobuf rpc: ListUsers
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse>;
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: InviteUser
     */
    inviteUser(input: InviteUserRequest, options?: RpcOptions): UnaryCall<InviteUserRequest, InviteUserResponse>;
    /**
     * @generated from protobuf rpc: ValidateInvite
     */
    validateInvite(input: ValidateInviteRequest, options?: RpcOptions): UnaryCall<ValidateInviteRequest, ValidateInviteResponse>;
}
// Services definitions

/**
 * @generated from protobuf service service.AuthService
 */
export class AuthServiceClient implements IAuthServiceClient, ServiceInfo {
    typeName = AuthService.typeName;
    methods = AuthService.methods;
    options = AuthService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateUser
     */
    createUser(input: CreateUserRequest, options?: RpcOptions): UnaryCall<CreateUserRequest, CreateUserResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateUserRequest, CreateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUser
     */
    getUser(input: GetUserRequest, options?: RpcOptions): UnaryCall<GetUserRequest, GetUserResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserRequest, GetUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateUser
     */
    updateUser(input: UpdateUserRequest, options?: RpcOptions): UnaryCall<UpdateUserRequest, UpdateUserResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateUserRequest, UpdateUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteUser
     */
    deleteUser(input: DeleteUserRequest, options?: RpcOptions): UnaryCall<DeleteUserRequest, DeleteUserResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteUserRequest, DeleteUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListUsers
     */
    listUsers(input: ListUsersRequest, options?: RpcOptions): UnaryCall<ListUsersRequest, ListUsersResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsersRequest, ListUsersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Login
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: InviteUser
     */
    inviteUser(input: InviteUserRequest, options?: RpcOptions): UnaryCall<InviteUserRequest, InviteUserResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<InviteUserRequest, InviteUserResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ValidateInvite
     */
    validateInvite(input: ValidateInviteRequest, options?: RpcOptions): UnaryCall<ValidateInviteRequest, ValidateInviteResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ValidateInviteRequest, ValidateInviteResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * USER MANAGEMENT
 * Keep GetUser, UpdateUser (for non-email fields), DeleteUser, ListUsers in AuthService for now,
 * but if GetUser, ListUsers become accessible by regular users for own profile, move them.
 * Current design implies admin manages all users via AuthService.
 *
 * @generated from protobuf service service.UserService
 */
export interface IUserServiceClient {
    /**
     * API Key management (MOVED FROM AUTH SERVICE)
     *
     * @generated from protobuf rpc: CreateAPIKey
     */
    createAPIKey(input: CreateAPIKeyRequest, options?: RpcOptions): UnaryCall<CreateAPIKeyRequest, CreateAPIKeyResponse>;
    /**
     * @generated from protobuf rpc: RotateAPIKey
     */
    rotateAPIKey(input: RotateAPIKeyRequest, options?: RpcOptions): UnaryCall<RotateAPIKeyRequest, RotateAPIKeyResponse>;
    /**
     * @generated from protobuf rpc: ActivateAPIKey
     */
    activateAPIKey(input: ActivateAPIKeyRequest, options?: RpcOptions): UnaryCall<ActivateAPIKeyRequest, ActivateAPIKeyResponse>;
    /**
     * @generated from protobuf rpc: DeactivateAPIKey
     */
    deactivateAPIKey(input: DeactivateAPIKeyRequest, options?: RpcOptions): UnaryCall<DeactivateAPIKeyRequest, DeactivateAPIKeyResponse>;
    /**
     * @generated from protobuf rpc: ListAPIKeys
     */
    listAPIKeys(input: ListAPIKeysRequest, options?: RpcOptions): UnaryCall<ListAPIKeysRequest, ListAPIKeysResponse>;
    /**
     * Password management (NEW)
     *
     * @generated from protobuf rpc: ChangePassword
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse>;
}
/**
 * USER MANAGEMENT
 * Keep GetUser, UpdateUser (for non-email fields), DeleteUser, ListUsers in AuthService for now,
 * but if GetUser, ListUsers become accessible by regular users for own profile, move them.
 * Current design implies admin manages all users via AuthService.
 *
 * @generated from protobuf service service.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * API Key management (MOVED FROM AUTH SERVICE)
     *
     * @generated from protobuf rpc: CreateAPIKey
     */
    createAPIKey(input: CreateAPIKeyRequest, options?: RpcOptions): UnaryCall<CreateAPIKeyRequest, CreateAPIKeyResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAPIKeyRequest, CreateAPIKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RotateAPIKey
     */
    rotateAPIKey(input: RotateAPIKeyRequest, options?: RpcOptions): UnaryCall<RotateAPIKeyRequest, RotateAPIKeyResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<RotateAPIKeyRequest, RotateAPIKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ActivateAPIKey
     */
    activateAPIKey(input: ActivateAPIKeyRequest, options?: RpcOptions): UnaryCall<ActivateAPIKeyRequest, ActivateAPIKeyResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ActivateAPIKeyRequest, ActivateAPIKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeactivateAPIKey
     */
    deactivateAPIKey(input: DeactivateAPIKeyRequest, options?: RpcOptions): UnaryCall<DeactivateAPIKeyRequest, DeactivateAPIKeyResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeactivateAPIKeyRequest, DeactivateAPIKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListAPIKeys
     */
    listAPIKeys(input: ListAPIKeysRequest, options?: RpcOptions): UnaryCall<ListAPIKeysRequest, ListAPIKeysResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAPIKeysRequest, ListAPIKeysResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Password management (NEW)
     *
     * @generated from protobuf rpc: ChangePassword
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordRequest, ChangePasswordResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service service.ScanService
 */
export interface IScanServiceClient {
    /**
     * Individual scan methods (retained for flexibility, deprecated as GenerateReport is preferred)
     *
     * @generated from protobuf rpc: ScanDomain
     */
    scanDomain(input: ScanDomainRequest, options?: RpcOptions): UnaryCall<ScanDomainRequest, ScanDomainResponse>;
    /**
     * @generated from protobuf rpc: ScanTLS
     */
    scanTLS(input: ScanTLSRequest, options?: RpcOptions): UnaryCall<ScanTLSRequest, ScanTLSResponse>;
    /**
     * @generated from protobuf rpc: ScanCrtSh
     */
    scanCrtSh(input: ScanCrtShRequest, options?: RpcOptions): UnaryCall<ScanCrtShRequest, ScanCrtShResponse>;
    /**
     * @generated from protobuf rpc: ScanChaos
     */
    scanChaos(input: ScanChaosRequest, options?: RpcOptions): UnaryCall<ScanChaosRequest, ScanChaosResponse>;
    /**
     * @generated from protobuf rpc: ScanShodan
     */
    scanShodan(input: ScanShodanRequest, options?: RpcOptions): UnaryCall<ScanShodanRequest, ScanShodanResponse>;
    /**
     * @generated from protobuf rpc: ScanOTX
     */
    scanOTX(input: ScanOTXRequest, options?: RpcOptions): UnaryCall<ScanOTXRequest, ScanOTXResponse>;
    /**
     * @generated from protobuf rpc: ScanWhois
     */
    scanWhois(input: ScanWhoisRequest, options?: RpcOptions): UnaryCall<ScanWhoisRequest, ScanWhoisResponse>;
    /**
     * @generated from protobuf rpc: ScanAbuseCh
     */
    scanAbuseCh(input: ScanAbuseChRequest, options?: RpcOptions): UnaryCall<ScanAbuseChRequest, ScanAbuseChResponse>;
    /**
     * @generated from protobuf rpc: ScanISC
     */
    scanISC(input: ScanISCRequest, options?: RpcOptions): UnaryCall<ScanISCRequest, ScanISCResponse>;
    /**
     * Methods to retrieve scan results by domain
     *
     * @generated from protobuf rpc: GetDNSScanResultsByDomain
     */
    getDNSScanResultsByDomain(input: GetDNSScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetDNSScanResultsByDomainRequest, GetDNSScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetTLSScanResultsByDomain
     */
    getTLSScanResultsByDomain(input: GetTLSScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetTLSScanResultsByDomainRequest, GetTLSScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetCrtShScanResultsByDomain
     */
    getCrtShScanResultsByDomain(input: GetCrtShScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetCrtShScanResultsByDomainRequest, GetCrtShScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetChaosScanResultsByDomain
     */
    getChaosScanResultsByDomain(input: GetChaosScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetChaosScanResultsByDomainRequest, GetChaosScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetShodanScanResultsByDomain
     */
    getShodanScanResultsByDomain(input: GetShodanScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetShodanScanResultsByDomainRequest, GetShodanScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetOTXScanResultsByDomain
     */
    getOTXScanResultsByDomain(input: GetOTXScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetOTXScanResultsByDomainRequest, GetOTXScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetWhoisScanResultsByDomain
     */
    getWhoisScanResultsByDomain(input: GetWhoisScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetWhoisScanResultsByDomainRequest, GetWhoisScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetAbuseChScanResultsByDomain
     */
    getAbuseChScanResultsByDomain(input: GetAbuseChScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetAbuseChScanResultsByDomainRequest, GetAbuseChScanResultsByDomainResponse>;
    /**
     * @generated from protobuf rpc: GetISCScanResultsByDomain
     */
    getISCScanResultsByDomain(input: GetISCScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetISCScanResultsByDomainRequest, GetISCScanResultsByDomainResponse>;
    /**
     * Method to retrieve a specific DNS scan result by ID
     *
     * @generated from protobuf rpc: GetDNSScanResultByID
     */
    getDNSScanResultByID(input: GetDNSScanResultByIDRequest, options?: RpcOptions): UnaryCall<GetDNSScanResultByIDRequest, GetDNSScanResultByIDResponse>;
}
/**
 * @generated from protobuf service service.ScanService
 */
export class ScanServiceClient implements IScanServiceClient, ServiceInfo {
    typeName = ScanService.typeName;
    methods = ScanService.methods;
    options = ScanService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Individual scan methods (retained for flexibility, deprecated as GenerateReport is preferred)
     *
     * @generated from protobuf rpc: ScanDomain
     */
    scanDomain(input: ScanDomainRequest, options?: RpcOptions): UnaryCall<ScanDomainRequest, ScanDomainResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanDomainRequest, ScanDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanTLS
     */
    scanTLS(input: ScanTLSRequest, options?: RpcOptions): UnaryCall<ScanTLSRequest, ScanTLSResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanTLSRequest, ScanTLSResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanCrtSh
     */
    scanCrtSh(input: ScanCrtShRequest, options?: RpcOptions): UnaryCall<ScanCrtShRequest, ScanCrtShResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanCrtShRequest, ScanCrtShResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanChaos
     */
    scanChaos(input: ScanChaosRequest, options?: RpcOptions): UnaryCall<ScanChaosRequest, ScanChaosResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanChaosRequest, ScanChaosResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanShodan
     */
    scanShodan(input: ScanShodanRequest, options?: RpcOptions): UnaryCall<ScanShodanRequest, ScanShodanResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanShodanRequest, ScanShodanResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanOTX
     */
    scanOTX(input: ScanOTXRequest, options?: RpcOptions): UnaryCall<ScanOTXRequest, ScanOTXResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanOTXRequest, ScanOTXResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanWhois
     */
    scanWhois(input: ScanWhoisRequest, options?: RpcOptions): UnaryCall<ScanWhoisRequest, ScanWhoisResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanWhoisRequest, ScanWhoisResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanAbuseCh
     */
    scanAbuseCh(input: ScanAbuseChRequest, options?: RpcOptions): UnaryCall<ScanAbuseChRequest, ScanAbuseChResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanAbuseChRequest, ScanAbuseChResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ScanISC
     */
    scanISC(input: ScanISCRequest, options?: RpcOptions): UnaryCall<ScanISCRequest, ScanISCResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScanISCRequest, ScanISCResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Methods to retrieve scan results by domain
     *
     * @generated from protobuf rpc: GetDNSScanResultsByDomain
     */
    getDNSScanResultsByDomain(input: GetDNSScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetDNSScanResultsByDomainRequest, GetDNSScanResultsByDomainResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDNSScanResultsByDomainRequest, GetDNSScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetTLSScanResultsByDomain
     */
    getTLSScanResultsByDomain(input: GetTLSScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetTLSScanResultsByDomainRequest, GetTLSScanResultsByDomainResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTLSScanResultsByDomainRequest, GetTLSScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCrtShScanResultsByDomain
     */
    getCrtShScanResultsByDomain(input: GetCrtShScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetCrtShScanResultsByDomainRequest, GetCrtShScanResultsByDomainResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCrtShScanResultsByDomainRequest, GetCrtShScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetChaosScanResultsByDomain
     */
    getChaosScanResultsByDomain(input: GetChaosScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetChaosScanResultsByDomainRequest, GetChaosScanResultsByDomainResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetChaosScanResultsByDomainRequest, GetChaosScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetShodanScanResultsByDomain
     */
    getShodanScanResultsByDomain(input: GetShodanScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetShodanScanResultsByDomainRequest, GetShodanScanResultsByDomainResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetShodanScanResultsByDomainRequest, GetShodanScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOTXScanResultsByDomain
     */
    getOTXScanResultsByDomain(input: GetOTXScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetOTXScanResultsByDomainRequest, GetOTXScanResultsByDomainResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOTXScanResultsByDomainRequest, GetOTXScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetWhoisScanResultsByDomain
     */
    getWhoisScanResultsByDomain(input: GetWhoisScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetWhoisScanResultsByDomainRequest, GetWhoisScanResultsByDomainResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetWhoisScanResultsByDomainRequest, GetWhoisScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAbuseChScanResultsByDomain
     */
    getAbuseChScanResultsByDomain(input: GetAbuseChScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetAbuseChScanResultsByDomainRequest, GetAbuseChScanResultsByDomainResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAbuseChScanResultsByDomainRequest, GetAbuseChScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetISCScanResultsByDomain
     */
    getISCScanResultsByDomain(input: GetISCScanResultsByDomainRequest, options?: RpcOptions): UnaryCall<GetISCScanResultsByDomainRequest, GetISCScanResultsByDomainResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetISCScanResultsByDomainRequest, GetISCScanResultsByDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Method to retrieve a specific DNS scan result by ID
     *
     * @generated from protobuf rpc: GetDNSScanResultByID
     */
    getDNSScanResultByID(input: GetDNSScanResultByIDRequest, options?: RpcOptions): UnaryCall<GetDNSScanResultByIDRequest, GetDNSScanResultByIDResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDNSScanResultByIDRequest, GetDNSScanResultByIDResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service service.ReportService
 */
export interface IReportServiceClient {
    /**
     * @generated from protobuf rpc: GenerateReport
     */
    generateReport(input: GenerateReportRequest, options?: RpcOptions): UnaryCall<GenerateReportRequest, GenerateReportResponse>;
    /**
     * @generated from protobuf rpc: ListReports
     */
    listReports(input: ListReportsRequest, options?: RpcOptions): UnaryCall<ListReportsRequest, ListReportsResponse>;
    /**
     * @generated from protobuf rpc: GetReportById
     */
    getReportById(input: GetReportByIdRequest, options?: RpcOptions): UnaryCall<GetReportByIdRequest, GetReportByIdResponse>;
    /**
     * @generated from protobuf rpc: CalculateRiskScore
     */
    calculateRiskScore(input: CalculateRiskScoreRequest, options?: RpcOptions): UnaryCall<CalculateRiskScoreRequest, CalculateRiskScoreResponse>;
}
/**
 * @generated from protobuf service service.ReportService
 */
export class ReportServiceClient implements IReportServiceClient, ServiceInfo {
    typeName = ReportService.typeName;
    methods = ReportService.methods;
    options = ReportService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GenerateReport
     */
    generateReport(input: GenerateReportRequest, options?: RpcOptions): UnaryCall<GenerateReportRequest, GenerateReportResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenerateReportRequest, GenerateReportResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListReports
     */
    listReports(input: ListReportsRequest, options?: RpcOptions): UnaryCall<ListReportsRequest, ListReportsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListReportsRequest, ListReportsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetReportById
     */
    getReportById(input: GetReportByIdRequest, options?: RpcOptions): UnaryCall<GetReportByIdRequest, GetReportByIdResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetReportByIdRequest, GetReportByIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CalculateRiskScore
     */
    calculateRiskScore(input: CalculateRiskScoreRequest, options?: RpcOptions): UnaryCall<CalculateRiskScoreRequest, CalculateRiskScoreResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CalculateRiskScoreRequest, CalculateRiskScoreResponse>("unary", this._transport, method, opt, input);
    }
}
