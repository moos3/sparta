/**
 * @fileoverview gRPC-Web generated client stub for service
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.29.3
// source: proto/service.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.service = require('./service_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.service.UserServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.service.UserServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.CreateUserRequest,
 *   !proto.service.CreateUserResponse>}
 */
const methodDescriptor_UserService_CreateUser = new grpc.web.MethodDescriptor(
  '/service.UserService/CreateUser',
  grpc.web.MethodType.UNARY,
  proto.service.CreateUserRequest,
  proto.service.CreateUserResponse,
  /**
   * @param {!proto.service.CreateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.CreateUserResponse.deserializeBinary
);


/**
 * @param {!proto.service.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.CreateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.CreateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.createUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser,
      callback);
};


/**
 * @param {!proto.service.CreateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.CreateUserResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.createUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/CreateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_CreateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetUserRequest,
 *   !proto.service.GetUserResponse>}
 */
const methodDescriptor_UserService_GetUser = new grpc.web.MethodDescriptor(
  '/service.UserService/GetUser',
  grpc.web.MethodType.UNARY,
  proto.service.GetUserRequest,
  proto.service.GetUserResponse,
  /**
   * @param {!proto.service.GetUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetUserResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser,
      callback);
};


/**
 * @param {!proto.service.GetUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetUserResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetUser',
      request,
      metadata || {},
      methodDescriptor_UserService_GetUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.UpdateUserRequest,
 *   !proto.service.UpdateUserResponse>}
 */
const methodDescriptor_UserService_UpdateUser = new grpc.web.MethodDescriptor(
  '/service.UserService/UpdateUser',
  grpc.web.MethodType.UNARY,
  proto.service.UpdateUserRequest,
  proto.service.UpdateUserResponse,
  /**
   * @param {!proto.service.UpdateUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.UpdateUserResponse.deserializeBinary
);


/**
 * @param {!proto.service.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.UpdateUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.UpdateUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.updateUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser,
      callback);
};


/**
 * @param {!proto.service.UpdateUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.UpdateUserResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.updateUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/UpdateUser',
      request,
      metadata || {},
      methodDescriptor_UserService_UpdateUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.DeleteUserRequest,
 *   !proto.service.DeleteUserResponse>}
 */
const methodDescriptor_UserService_DeleteUser = new grpc.web.MethodDescriptor(
  '/service.UserService/DeleteUser',
  grpc.web.MethodType.UNARY,
  proto.service.DeleteUserRequest,
  proto.service.DeleteUserResponse,
  /**
   * @param {!proto.service.DeleteUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.DeleteUserResponse.deserializeBinary
);


/**
 * @param {!proto.service.DeleteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.DeleteUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.DeleteUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.deleteUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser,
      callback);
};


/**
 * @param {!proto.service.DeleteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.DeleteUserResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.deleteUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/DeleteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_DeleteUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ListUsersRequest,
 *   !proto.service.ListUsersResponse>}
 */
const methodDescriptor_UserService_ListUsers = new grpc.web.MethodDescriptor(
  '/service.UserService/ListUsers',
  grpc.web.MethodType.UNARY,
  proto.service.ListUsersRequest,
  proto.service.ListUsersResponse,
  /**
   * @param {!proto.service.ListUsersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ListUsersResponse.deserializeBinary
);


/**
 * @param {!proto.service.ListUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ListUsersResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ListUsersResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.listUsers =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ListUsers',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUsers,
      callback);
};


/**
 * @param {!proto.service.ListUsersRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ListUsersResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.listUsers =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ListUsers',
      request,
      metadata || {},
      methodDescriptor_UserService_ListUsers);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.InviteUserRequest,
 *   !proto.service.InviteUserResponse>}
 */
const methodDescriptor_UserService_InviteUser = new grpc.web.MethodDescriptor(
  '/service.UserService/InviteUser',
  grpc.web.MethodType.UNARY,
  proto.service.InviteUserRequest,
  proto.service.InviteUserResponse,
  /**
   * @param {!proto.service.InviteUserRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.InviteUserResponse.deserializeBinary
);


/**
 * @param {!proto.service.InviteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.InviteUserResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.InviteUserResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.inviteUser =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/InviteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_InviteUser,
      callback);
};


/**
 * @param {!proto.service.InviteUserRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.InviteUserResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.inviteUser =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/InviteUser',
      request,
      metadata || {},
      methodDescriptor_UserService_InviteUser);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ValidateInviteRequest,
 *   !proto.service.ValidateInviteResponse>}
 */
const methodDescriptor_UserService_ValidateInvite = new grpc.web.MethodDescriptor(
  '/service.UserService/ValidateInvite',
  grpc.web.MethodType.UNARY,
  proto.service.ValidateInviteRequest,
  proto.service.ValidateInviteResponse,
  /**
   * @param {!proto.service.ValidateInviteRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ValidateInviteResponse.deserializeBinary
);


/**
 * @param {!proto.service.ValidateInviteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ValidateInviteResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ValidateInviteResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.validateInvite =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ValidateInvite',
      request,
      metadata || {},
      methodDescriptor_UserService_ValidateInvite,
      callback);
};


/**
 * @param {!proto.service.ValidateInviteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ValidateInviteResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.validateInvite =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ValidateInvite',
      request,
      metadata || {},
      methodDescriptor_UserService_ValidateInvite);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanDomainRequest,
 *   !proto.service.ScanDomainResponse>}
 */
const methodDescriptor_UserService_ScanDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanDomain',
  grpc.web.MethodType.UNARY,
  proto.service.ScanDomainRequest,
  proto.service.ScanDomainResponse,
  /**
   * @param {!proto.service.ScanDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanDomain,
      callback);
};


/**
 * @param {!proto.service.ScanDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetDNSScanResultsByDomainRequest,
 *   !proto.service.GetDNSScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetDNSScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetDNSScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetDNSScanResultsByDomainRequest,
  proto.service.GetDNSScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetDNSScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetDNSScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetDNSScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetDNSScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetDNSScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getDNSScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetDNSScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetDNSScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetDNSScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetDNSScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getDNSScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetDNSScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetDNSScanResultsByDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanTLSRequest,
 *   !proto.service.ScanTLSResponse>}
 */
const methodDescriptor_UserService_ScanTLS = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanTLS',
  grpc.web.MethodType.UNARY,
  proto.service.ScanTLSRequest,
  proto.service.ScanTLSResponse,
  /**
   * @param {!proto.service.ScanTLSRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanTLSResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanTLSRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanTLSResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanTLSResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanTLS =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanTLS',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanTLS,
      callback);
};


/**
 * @param {!proto.service.ScanTLSRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanTLSResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanTLS =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanTLS',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanTLS);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetTLSScanResultsByDomainRequest,
 *   !proto.service.GetTLSScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetTLSScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetTLSScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetTLSScanResultsByDomainRequest,
  proto.service.GetTLSScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetTLSScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetTLSScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetTLSScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetTLSScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetTLSScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getTLSScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetTLSScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetTLSScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetTLSScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetTLSScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getTLSScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetTLSScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetTLSScanResultsByDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanCrtShRequest,
 *   !proto.service.ScanCrtShResponse>}
 */
const methodDescriptor_UserService_ScanCrtSh = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanCrtSh',
  grpc.web.MethodType.UNARY,
  proto.service.ScanCrtShRequest,
  proto.service.ScanCrtShResponse,
  /**
   * @param {!proto.service.ScanCrtShRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanCrtShResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanCrtShRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanCrtShResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanCrtShResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanCrtSh =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanCrtSh',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanCrtSh,
      callback);
};


/**
 * @param {!proto.service.ScanCrtShRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanCrtShResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanCrtSh =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanCrtSh',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanCrtSh);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetCrtShScanResultsByDomainRequest,
 *   !proto.service.GetCrtShScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetCrtShScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetCrtShScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetCrtShScanResultsByDomainRequest,
  proto.service.GetCrtShScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetCrtShScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetCrtShScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetCrtShScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetCrtShScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetCrtShScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getCrtShScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetCrtShScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetCrtShScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetCrtShScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetCrtShScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getCrtShScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetCrtShScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetCrtShScanResultsByDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanChaosRequest,
 *   !proto.service.ScanChaosResponse>}
 */
const methodDescriptor_UserService_ScanChaos = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanChaos',
  grpc.web.MethodType.UNARY,
  proto.service.ScanChaosRequest,
  proto.service.ScanChaosResponse,
  /**
   * @param {!proto.service.ScanChaosRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanChaosResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanChaosRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanChaosResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanChaosResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanChaos =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanChaos',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanChaos,
      callback);
};


/**
 * @param {!proto.service.ScanChaosRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanChaosResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanChaos =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanChaos',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanChaos);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetChaosScanResultsByDomainRequest,
 *   !proto.service.GetChaosScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetChaosScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetChaosScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetChaosScanResultsByDomainRequest,
  proto.service.GetChaosScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetChaosScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetChaosScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetChaosScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetChaosScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetChaosScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getChaosScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetChaosScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetChaosScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetChaosScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetChaosScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getChaosScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetChaosScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetChaosScanResultsByDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanShodanRequest,
 *   !proto.service.ScanShodanResponse>}
 */
const methodDescriptor_UserService_ScanShodan = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanShodan',
  grpc.web.MethodType.UNARY,
  proto.service.ScanShodanRequest,
  proto.service.ScanShodanResponse,
  /**
   * @param {!proto.service.ScanShodanRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanShodanResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanShodanRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanShodanResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanShodanResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanShodan =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanShodan',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanShodan,
      callback);
};


/**
 * @param {!proto.service.ScanShodanRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanShodanResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanShodan =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanShodan',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanShodan);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetShodanScanResultsByDomainRequest,
 *   !proto.service.GetShodanScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetShodanScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetShodanScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetShodanScanResultsByDomainRequest,
  proto.service.GetShodanScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetShodanScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetShodanScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetShodanScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetShodanScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetShodanScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getShodanScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetShodanScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetShodanScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetShodanScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetShodanScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getShodanScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetShodanScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetShodanScanResultsByDomain);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.ScanOTXRequest,
 *   !proto.service.ScanOTXResponse>}
 */
const methodDescriptor_UserService_ScanOTX = new grpc.web.MethodDescriptor(
  '/service.UserService/ScanOTX',
  grpc.web.MethodType.UNARY,
  proto.service.ScanOTXRequest,
  proto.service.ScanOTXResponse,
  /**
   * @param {!proto.service.ScanOTXRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.ScanOTXResponse.deserializeBinary
);


/**
 * @param {!proto.service.ScanOTXRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.ScanOTXResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.ScanOTXResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.scanOTX =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/ScanOTX',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanOTX,
      callback);
};


/**
 * @param {!proto.service.ScanOTXRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.ScanOTXResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.scanOTX =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/ScanOTX',
      request,
      metadata || {},
      methodDescriptor_UserService_ScanOTX);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.service.GetOTXScanResultsByDomainRequest,
 *   !proto.service.GetOTXScanResultsByDomainResponse>}
 */
const methodDescriptor_UserService_GetOTXScanResultsByDomain = new grpc.web.MethodDescriptor(
  '/service.UserService/GetOTXScanResultsByDomain',
  grpc.web.MethodType.UNARY,
  proto.service.GetOTXScanResultsByDomainRequest,
  proto.service.GetOTXScanResultsByDomainResponse,
  /**
   * @param {!proto.service.GetOTXScanResultsByDomainRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.service.GetOTXScanResultsByDomainResponse.deserializeBinary
);


/**
 * @param {!proto.service.GetOTXScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.service.GetOTXScanResultsByDomainResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.service.GetOTXScanResultsByDomainResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.service.UserServiceClient.prototype.getOTXScanResultsByDomain =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/service.UserService/GetOTXScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetOTXScanResultsByDomain,
      callback);
};


/**
 * @param {!proto.service.GetOTXScanResultsByDomainRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.service.GetOTXScanResultsByDomainResponse>}
 *     Promise that resolves to the response
 */
proto.service.UserServicePromiseClient.prototype.getOTXScanResultsByDomain =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/service.UserService/GetOTXScanResultsByDomain',
      request,
      metadata || {},
      methodDescriptor_UserService_GetOTXScanResultsByDomain);
};


module.exports = proto.service;

