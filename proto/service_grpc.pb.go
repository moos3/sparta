// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_CreateUser_FullMethodName       = "/service.AuthService/CreateUser"
	AuthService_GetUser_FullMethodName          = "/service.AuthService/GetUser"
	AuthService_UpdateUser_FullMethodName       = "/service.AuthService/UpdateUser"
	AuthService_DeleteUser_FullMethodName       = "/service.AuthService/DeleteUser"
	AuthService_ListUsers_FullMethodName        = "/service.AuthService/ListUsers"
	AuthService_CreateAPIKey_FullMethodName     = "/service.AuthService/CreateAPIKey"
	AuthService_RotateAPIKey_FullMethodName     = "/service.AuthService/RotateAPIKey"
	AuthService_ActivateAPIKey_FullMethodName   = "/service.AuthService/ActivateAPIKey"
	AuthService_DeactivateAPIKey_FullMethodName = "/service.AuthService/DeactivateAPIKey"
	AuthService_ListAPIKeys_FullMethodName      = "/service.AuthService/ListAPIKeys"
	AuthService_Login_FullMethodName            = "/service.AuthService/Login"
	AuthService_InviteUser_FullMethodName       = "/service.AuthService/InviteUser"
	AuthService_ValidateInvite_FullMethodName   = "/service.AuthService/ValidateInvite"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error)
	RotateAPIKey(ctx context.Context, in *RotateAPIKeyRequest, opts ...grpc.CallOption) (*RotateAPIKeyResponse, error)
	ActivateAPIKey(ctx context.Context, in *ActivateAPIKeyRequest, opts ...grpc.CallOption) (*ActivateAPIKeyResponse, error)
	DeactivateAPIKey(ctx context.Context, in *DeactivateAPIKeyRequest, opts ...grpc.CallOption) (*DeactivateAPIKeyResponse, error)
	ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	ValidateInvite(ctx context.Context, in *ValidateInviteRequest, opts ...grpc.CallOption) (*ValidateInviteResponse, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AuthService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, AuthService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AuthService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, AuthService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) CreateAPIKey(ctx context.Context, in *CreateAPIKeyRequest, opts ...grpc.CallOption) (*CreateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAPIKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_CreateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RotateAPIKey(ctx context.Context, in *RotateAPIKeyRequest, opts ...grpc.CallOption) (*RotateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateAPIKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_RotateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ActivateAPIKey(ctx context.Context, in *ActivateAPIKeyRequest, opts ...grpc.CallOption) (*ActivateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActivateAPIKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_ActivateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeactivateAPIKey(ctx context.Context, in *DeactivateAPIKeyRequest, opts ...grpc.CallOption) (*DeactivateAPIKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeactivateAPIKeyResponse)
	err := c.cc.Invoke(ctx, AuthService_DeactivateAPIKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ListAPIKeys(ctx context.Context, in *ListAPIKeysRequest, opts ...grpc.CallOption) (*ListAPIKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAPIKeysResponse)
	err := c.cc.Invoke(ctx, AuthService_ListAPIKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AuthService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, AuthService_InviteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) ValidateInvite(ctx context.Context, in *ValidateInviteRequest, opts ...grpc.CallOption) (*ValidateInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInviteResponse)
	err := c.cc.Invoke(ctx, AuthService_ValidateInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error)
	RotateAPIKey(context.Context, *RotateAPIKeyRequest) (*RotateAPIKeyResponse, error)
	ActivateAPIKey(context.Context, *ActivateAPIKeyRequest) (*ActivateAPIKeyResponse, error)
	DeactivateAPIKey(context.Context, *DeactivateAPIKeyRequest) (*DeactivateAPIKeyResponse, error)
	ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	ValidateInvite(context.Context, *ValidateInviteRequest) (*ValidateInviteResponse, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedAuthServiceServer) CreateAPIKey(context.Context, *CreateAPIKeyRequest) (*CreateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIKey not implemented")
}
func (UnimplementedAuthServiceServer) RotateAPIKey(context.Context, *RotateAPIKeyRequest) (*RotateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateAPIKey not implemented")
}
func (UnimplementedAuthServiceServer) ActivateAPIKey(context.Context, *ActivateAPIKeyRequest) (*ActivateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateAPIKey not implemented")
}
func (UnimplementedAuthServiceServer) DeactivateAPIKey(context.Context, *DeactivateAPIKeyRequest) (*DeactivateAPIKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateAPIKey not implemented")
}
func (UnimplementedAuthServiceServer) ListAPIKeys(context.Context, *ListAPIKeysRequest) (*ListAPIKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAPIKeys not implemented")
}
func (UnimplementedAuthServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedAuthServiceServer) ValidateInvite(context.Context, *ValidateInviteRequest) (*ValidateInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInvite not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_CreateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateAPIKey(ctx, req.(*CreateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RotateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RotateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RotateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RotateAPIKey(ctx, req.(*RotateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ActivateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ActivateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ActivateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ActivateAPIKey(ctx, req.(*ActivateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeactivateAPIKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAPIKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeactivateAPIKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeactivateAPIKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeactivateAPIKey(ctx, req.(*DeactivateAPIKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ListAPIKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAPIKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ListAPIKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ListAPIKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ListAPIKeys(ctx, req.(*ListAPIKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_ValidateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).ValidateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_ValidateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).ValidateInvite(ctx, req.(*ValidateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _AuthService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _AuthService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _AuthService_ListUsers_Handler,
		},
		{
			MethodName: "CreateAPIKey",
			Handler:    _AuthService_CreateAPIKey_Handler,
		},
		{
			MethodName: "RotateAPIKey",
			Handler:    _AuthService_RotateAPIKey_Handler,
		},
		{
			MethodName: "ActivateAPIKey",
			Handler:    _AuthService_ActivateAPIKey_Handler,
		},
		{
			MethodName: "DeactivateAPIKey",
			Handler:    _AuthService_DeactivateAPIKey_Handler,
		},
		{
			MethodName: "ListAPIKeys",
			Handler:    _AuthService_ListAPIKeys_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _AuthService_InviteUser_Handler,
		},
		{
			MethodName: "ValidateInvite",
			Handler:    _AuthService_ValidateInvite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}

const (
	UserService_ScanDomain_FullMethodName                    = "/service.UserService/ScanDomain"
	UserService_ScanTLS_FullMethodName                       = "/service.UserService/ScanTLS"
	UserService_ScanCrtSh_FullMethodName                     = "/service.UserService/ScanCrtSh"
	UserService_ScanChaos_FullMethodName                     = "/service.UserService/ScanChaos"
	UserService_ScanShodan_FullMethodName                    = "/service.UserService/ScanShodan"
	UserService_ScanOTX_FullMethodName                       = "/service.UserService/ScanOTX"
	UserService_ScanWhois_FullMethodName                     = "/service.UserService/ScanWhois"
	UserService_ScanAbuseCh_FullMethodName                   = "/service.UserService/ScanAbuseCh"
	UserService_GetDNSScanResultsByDomain_FullMethodName     = "/service.UserService/GetDNSScanResultsByDomain"
	UserService_GetTLSScanResultsByDomain_FullMethodName     = "/service.UserService/GetTLSScanResultsByDomain"
	UserService_GetCrtShScanResultsByDomain_FullMethodName   = "/service.UserService/GetCrtShScanResultsByDomain"
	UserService_GetChaosScanResultsByDomain_FullMethodName   = "/service.UserService/GetChaosScanResultsByDomain"
	UserService_GetShodanScanResultsByDomain_FullMethodName  = "/service.UserService/GetShodanScanResultsByDomain"
	UserService_GetOTXScanResultsByDomain_FullMethodName     = "/service.UserService/GetOTXScanResultsByDomain"
	UserService_GetWhoisScanResultsByDomain_FullMethodName   = "/service.UserService/GetWhoisScanResultsByDomain"
	UserService_GetAbuseChScanResultsByDomain_FullMethodName = "/service.UserService/GetAbuseChScanResultsByDomain"
	UserService_GetDNSScanResultByID_FullMethodName          = "/service.UserService/GetDNSScanResultByID"
	UserService_CalculateRiskScore_FullMethodName            = "/service.UserService/CalculateRiskScore"
	UserService_GenerateReport_FullMethodName                = "/service.UserService/GenerateReport"
	UserService_ListReports_FullMethodName                   = "/service.UserService/ListReports"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Individual scan methods (retained for flexibility, deprecated as GenerateReport is preferred)
	ScanDomain(ctx context.Context, in *ScanDomainRequest, opts ...grpc.CallOption) (*ScanDomainResponse, error)
	ScanTLS(ctx context.Context, in *ScanTLSRequest, opts ...grpc.CallOption) (*ScanTLSResponse, error)
	ScanCrtSh(ctx context.Context, in *ScanCrtShRequest, opts ...grpc.CallOption) (*ScanCrtShResponse, error)
	ScanChaos(ctx context.Context, in *ScanChaosRequest, opts ...grpc.CallOption) (*ScanChaosResponse, error)
	ScanShodan(ctx context.Context, in *ScanShodanRequest, opts ...grpc.CallOption) (*ScanShodanResponse, error)
	ScanOTX(ctx context.Context, in *ScanOTXRequest, opts ...grpc.CallOption) (*ScanOTXResponse, error)
	ScanWhois(ctx context.Context, in *ScanWhoisRequest, opts ...grpc.CallOption) (*ScanWhoisResponse, error)
	ScanAbuseCh(ctx context.Context, in *ScanAbuseChRequest, opts ...grpc.CallOption) (*ScanAbuseChResponse, error)
	// Methods to retrieve scan results by domain
	GetDNSScanResultsByDomain(ctx context.Context, in *GetDNSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetDNSScanResultsByDomainResponse, error)
	GetTLSScanResultsByDomain(ctx context.Context, in *GetTLSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetTLSScanResultsByDomainResponse, error)
	GetCrtShScanResultsByDomain(ctx context.Context, in *GetCrtShScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetCrtShScanResultsByDomainResponse, error)
	GetChaosScanResultsByDomain(ctx context.Context, in *GetChaosScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetChaosScanResultsByDomainResponse, error)
	GetShodanScanResultsByDomain(ctx context.Context, in *GetShodanScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetShodanScanResultsByDomainResponse, error)
	GetOTXScanResultsByDomain(ctx context.Context, in *GetOTXScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetOTXScanResultsByDomainResponse, error)
	GetWhoisScanResultsByDomain(ctx context.Context, in *GetWhoisScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetWhoisScanResultsByDomainResponse, error)
	GetAbuseChScanResultsByDomain(ctx context.Context, in *GetAbuseChScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetAbuseChScanResultsByDomainResponse, error)
	// Method to retrieve a specific DNS scan result by ID
	GetDNSScanResultByID(ctx context.Context, in *GetDNSScanResultByIDRequest, opts ...grpc.CallOption) (*GetDNSScanResultByIDResponse, error)
	// Methods for risk score calculation and report generation
	CalculateRiskScore(ctx context.Context, in *CalculateRiskScoreRequest, opts ...grpc.CallOption) (*CalculateRiskScoreResponse, error)
	GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error)
	ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ScanDomain(ctx context.Context, in *ScanDomainRequest, opts ...grpc.CallOption) (*ScanDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanDomainResponse)
	err := c.cc.Invoke(ctx, UserService_ScanDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanTLS(ctx context.Context, in *ScanTLSRequest, opts ...grpc.CallOption) (*ScanTLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanTLSResponse)
	err := c.cc.Invoke(ctx, UserService_ScanTLS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanCrtSh(ctx context.Context, in *ScanCrtShRequest, opts ...grpc.CallOption) (*ScanCrtShResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanCrtShResponse)
	err := c.cc.Invoke(ctx, UserService_ScanCrtSh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanChaos(ctx context.Context, in *ScanChaosRequest, opts ...grpc.CallOption) (*ScanChaosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanChaosResponse)
	err := c.cc.Invoke(ctx, UserService_ScanChaos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanShodan(ctx context.Context, in *ScanShodanRequest, opts ...grpc.CallOption) (*ScanShodanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanShodanResponse)
	err := c.cc.Invoke(ctx, UserService_ScanShodan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanOTX(ctx context.Context, in *ScanOTXRequest, opts ...grpc.CallOption) (*ScanOTXResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanOTXResponse)
	err := c.cc.Invoke(ctx, UserService_ScanOTX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanWhois(ctx context.Context, in *ScanWhoisRequest, opts ...grpc.CallOption) (*ScanWhoisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanWhoisResponse)
	err := c.cc.Invoke(ctx, UserService_ScanWhois_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanAbuseCh(ctx context.Context, in *ScanAbuseChRequest, opts ...grpc.CallOption) (*ScanAbuseChResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanAbuseChResponse)
	err := c.cc.Invoke(ctx, UserService_ScanAbuseCh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDNSScanResultsByDomain(ctx context.Context, in *GetDNSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetDNSScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDNSScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetDNSScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTLSScanResultsByDomain(ctx context.Context, in *GetTLSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetTLSScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTLSScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetTLSScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCrtShScanResultsByDomain(ctx context.Context, in *GetCrtShScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetCrtShScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrtShScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetCrtShScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetChaosScanResultsByDomain(ctx context.Context, in *GetChaosScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetChaosScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChaosScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetChaosScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetShodanScanResultsByDomain(ctx context.Context, in *GetShodanScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetShodanScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShodanScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetShodanScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOTXScanResultsByDomain(ctx context.Context, in *GetOTXScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetOTXScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOTXScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetOTXScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetWhoisScanResultsByDomain(ctx context.Context, in *GetWhoisScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetWhoisScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWhoisScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetWhoisScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetAbuseChScanResultsByDomain(ctx context.Context, in *GetAbuseChScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetAbuseChScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAbuseChScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetAbuseChScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDNSScanResultByID(ctx context.Context, in *GetDNSScanResultByIDRequest, opts ...grpc.CallOption) (*GetDNSScanResultByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDNSScanResultByIDResponse)
	err := c.cc.Invoke(ctx, UserService_GetDNSScanResultByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CalculateRiskScore(ctx context.Context, in *CalculateRiskScoreRequest, opts ...grpc.CallOption) (*CalculateRiskScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateRiskScoreResponse)
	err := c.cc.Invoke(ctx, UserService_CalculateRiskScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GenerateReport(ctx context.Context, in *GenerateReportRequest, opts ...grpc.CallOption) (*GenerateReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateReportResponse)
	err := c.cc.Invoke(ctx, UserService_GenerateReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListReports(ctx context.Context, in *ListReportsRequest, opts ...grpc.CallOption) (*ListReportsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReportsResponse)
	err := c.cc.Invoke(ctx, UserService_ListReports_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// Individual scan methods (retained for flexibility, deprecated as GenerateReport is preferred)
	ScanDomain(context.Context, *ScanDomainRequest) (*ScanDomainResponse, error)
	ScanTLS(context.Context, *ScanTLSRequest) (*ScanTLSResponse, error)
	ScanCrtSh(context.Context, *ScanCrtShRequest) (*ScanCrtShResponse, error)
	ScanChaos(context.Context, *ScanChaosRequest) (*ScanChaosResponse, error)
	ScanShodan(context.Context, *ScanShodanRequest) (*ScanShodanResponse, error)
	ScanOTX(context.Context, *ScanOTXRequest) (*ScanOTXResponse, error)
	ScanWhois(context.Context, *ScanWhoisRequest) (*ScanWhoisResponse, error)
	ScanAbuseCh(context.Context, *ScanAbuseChRequest) (*ScanAbuseChResponse, error)
	// Methods to retrieve scan results by domain
	GetDNSScanResultsByDomain(context.Context, *GetDNSScanResultsByDomainRequest) (*GetDNSScanResultsByDomainResponse, error)
	GetTLSScanResultsByDomain(context.Context, *GetTLSScanResultsByDomainRequest) (*GetTLSScanResultsByDomainResponse, error)
	GetCrtShScanResultsByDomain(context.Context, *GetCrtShScanResultsByDomainRequest) (*GetCrtShScanResultsByDomainResponse, error)
	GetChaosScanResultsByDomain(context.Context, *GetChaosScanResultsByDomainRequest) (*GetChaosScanResultsByDomainResponse, error)
	GetShodanScanResultsByDomain(context.Context, *GetShodanScanResultsByDomainRequest) (*GetShodanScanResultsByDomainResponse, error)
	GetOTXScanResultsByDomain(context.Context, *GetOTXScanResultsByDomainRequest) (*GetOTXScanResultsByDomainResponse, error)
	GetWhoisScanResultsByDomain(context.Context, *GetWhoisScanResultsByDomainRequest) (*GetWhoisScanResultsByDomainResponse, error)
	GetAbuseChScanResultsByDomain(context.Context, *GetAbuseChScanResultsByDomainRequest) (*GetAbuseChScanResultsByDomainResponse, error)
	// Method to retrieve a specific DNS scan result by ID
	GetDNSScanResultByID(context.Context, *GetDNSScanResultByIDRequest) (*GetDNSScanResultByIDResponse, error)
	// Methods for risk score calculation and report generation
	CalculateRiskScore(context.Context, *CalculateRiskScoreRequest) (*CalculateRiskScoreResponse, error)
	GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error)
	ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) ScanDomain(context.Context, *ScanDomainRequest) (*ScanDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanTLS(context.Context, *ScanTLSRequest) (*ScanTLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanTLS not implemented")
}
func (UnimplementedUserServiceServer) ScanCrtSh(context.Context, *ScanCrtShRequest) (*ScanCrtShResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanCrtSh not implemented")
}
func (UnimplementedUserServiceServer) ScanChaos(context.Context, *ScanChaosRequest) (*ScanChaosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanChaos not implemented")
}
func (UnimplementedUserServiceServer) ScanShodan(context.Context, *ScanShodanRequest) (*ScanShodanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShodan not implemented")
}
func (UnimplementedUserServiceServer) ScanOTX(context.Context, *ScanOTXRequest) (*ScanOTXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanOTX not implemented")
}
func (UnimplementedUserServiceServer) ScanWhois(context.Context, *ScanWhoisRequest) (*ScanWhoisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanWhois not implemented")
}
func (UnimplementedUserServiceServer) ScanAbuseCh(context.Context, *ScanAbuseChRequest) (*ScanAbuseChResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanAbuseCh not implemented")
}
func (UnimplementedUserServiceServer) GetDNSScanResultsByDomain(context.Context, *GetDNSScanResultsByDomainRequest) (*GetDNSScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetTLSScanResultsByDomain(context.Context, *GetTLSScanResultsByDomainRequest) (*GetTLSScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetCrtShScanResultsByDomain(context.Context, *GetCrtShScanResultsByDomainRequest) (*GetCrtShScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrtShScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetChaosScanResultsByDomain(context.Context, *GetChaosScanResultsByDomainRequest) (*GetChaosScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChaosScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetShodanScanResultsByDomain(context.Context, *GetShodanScanResultsByDomainRequest) (*GetShodanScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShodanScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetOTXScanResultsByDomain(context.Context, *GetOTXScanResultsByDomainRequest) (*GetOTXScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTXScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetWhoisScanResultsByDomain(context.Context, *GetWhoisScanResultsByDomainRequest) (*GetWhoisScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhoisScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetAbuseChScanResultsByDomain(context.Context, *GetAbuseChScanResultsByDomainRequest) (*GetAbuseChScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAbuseChScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) GetDNSScanResultByID(context.Context, *GetDNSScanResultByIDRequest) (*GetDNSScanResultByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSScanResultByID not implemented")
}
func (UnimplementedUserServiceServer) CalculateRiskScore(context.Context, *CalculateRiskScoreRequest) (*CalculateRiskScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateRiskScore not implemented")
}
func (UnimplementedUserServiceServer) GenerateReport(context.Context, *GenerateReportRequest) (*GenerateReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateReport not implemented")
}
func (UnimplementedUserServiceServer) ListReports(context.Context, *ListReportsRequest) (*ListReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReports not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_ScanDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanDomain(ctx, req.(*ScanDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanTLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanTLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanTLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanTLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanTLS(ctx, req.(*ScanTLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanCrtSh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanCrtShRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanCrtSh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanCrtSh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanCrtSh(ctx, req.(*ScanCrtShRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanChaos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanChaosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanChaos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanChaos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanChaos(ctx, req.(*ScanChaosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanShodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanShodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanShodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanShodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanShodan(ctx, req.(*ScanShodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanOTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOTXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanOTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanOTX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanOTX(ctx, req.(*ScanOTXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanWhois_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanWhoisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanWhois(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanWhois_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanWhois(ctx, req.(*ScanWhoisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanAbuseCh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanAbuseChRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanAbuseCh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanAbuseCh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanAbuseCh(ctx, req.(*ScanAbuseChRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDNSScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDNSScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDNSScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDNSScanResultsByDomain(ctx, req.(*GetDNSScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTLSScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTLSScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTLSScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTLSScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTLSScanResultsByDomain(ctx, req.(*GetTLSScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCrtShScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrtShScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCrtShScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetCrtShScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCrtShScanResultsByDomain(ctx, req.(*GetCrtShScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetChaosScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChaosScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetChaosScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetChaosScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetChaosScanResultsByDomain(ctx, req.(*GetChaosScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetShodanScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShodanScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetShodanScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetShodanScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetShodanScanResultsByDomain(ctx, req.(*GetShodanScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOTXScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTXScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOTXScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOTXScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOTXScanResultsByDomain(ctx, req.(*GetOTXScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetWhoisScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhoisScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetWhoisScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetWhoisScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetWhoisScanResultsByDomain(ctx, req.(*GetWhoisScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetAbuseChScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAbuseChScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetAbuseChScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetAbuseChScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetAbuseChScanResultsByDomain(ctx, req.(*GetAbuseChScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDNSScanResultByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSScanResultByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDNSScanResultByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDNSScanResultByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDNSScanResultByID(ctx, req.(*GetDNSScanResultByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CalculateRiskScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateRiskScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CalculateRiskScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CalculateRiskScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CalculateRiskScore(ctx, req.(*CalculateRiskScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GenerateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GenerateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GenerateReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GenerateReport(ctx, req.(*GenerateReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListReports(ctx, req.(*ListReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScanDomain",
			Handler:    _UserService_ScanDomain_Handler,
		},
		{
			MethodName: "ScanTLS",
			Handler:    _UserService_ScanTLS_Handler,
		},
		{
			MethodName: "ScanCrtSh",
			Handler:    _UserService_ScanCrtSh_Handler,
		},
		{
			MethodName: "ScanChaos",
			Handler:    _UserService_ScanChaos_Handler,
		},
		{
			MethodName: "ScanShodan",
			Handler:    _UserService_ScanShodan_Handler,
		},
		{
			MethodName: "ScanOTX",
			Handler:    _UserService_ScanOTX_Handler,
		},
		{
			MethodName: "ScanWhois",
			Handler:    _UserService_ScanWhois_Handler,
		},
		{
			MethodName: "ScanAbuseCh",
			Handler:    _UserService_ScanAbuseCh_Handler,
		},
		{
			MethodName: "GetDNSScanResultsByDomain",
			Handler:    _UserService_GetDNSScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetTLSScanResultsByDomain",
			Handler:    _UserService_GetTLSScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetCrtShScanResultsByDomain",
			Handler:    _UserService_GetCrtShScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetChaosScanResultsByDomain",
			Handler:    _UserService_GetChaosScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetShodanScanResultsByDomain",
			Handler:    _UserService_GetShodanScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetOTXScanResultsByDomain",
			Handler:    _UserService_GetOTXScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetWhoisScanResultsByDomain",
			Handler:    _UserService_GetWhoisScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetAbuseChScanResultsByDomain",
			Handler:    _UserService_GetAbuseChScanResultsByDomain_Handler,
		},
		{
			MethodName: "GetDNSScanResultByID",
			Handler:    _UserService_GetDNSScanResultByID_Handler,
		},
		{
			MethodName: "CalculateRiskScore",
			Handler:    _UserService_CalculateRiskScore_Handler,
		},
		{
			MethodName: "GenerateReport",
			Handler:    _UserService_GenerateReport_Handler,
		},
		{
			MethodName: "ListReports",
			Handler:    _UserService_ListReports_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
