// proto/service.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_CreateUser_FullMethodName                   = "/service.UserService/CreateUser"
	UserService_GetUser_FullMethodName                      = "/service.UserService/GetUser"
	UserService_UpdateUser_FullMethodName                   = "/service.UserService/UpdateUser"
	UserService_DeleteUser_FullMethodName                   = "/service.UserService/DeleteUser"
	UserService_ListUsers_FullMethodName                    = "/service.UserService/ListUsers"
	UserService_InviteUser_FullMethodName                   = "/service.UserService/InviteUser"
	UserService_ValidateInvite_FullMethodName               = "/service.UserService/ValidateInvite"
	UserService_ScanDomain_FullMethodName                   = "/service.UserService/ScanDomain"
	UserService_GetDNSScanResultsByDomain_FullMethodName    = "/service.UserService/GetDNSScanResultsByDomain"
	UserService_ScanTLS_FullMethodName                      = "/service.UserService/ScanTLS"
	UserService_GetTLSScanResultsByDomain_FullMethodName    = "/service.UserService/GetTLSScanResultsByDomain"
	UserService_ScanCrtSh_FullMethodName                    = "/service.UserService/ScanCrtSh"
	UserService_GetCrtShScanResultsByDomain_FullMethodName  = "/service.UserService/GetCrtShScanResultsByDomain"
	UserService_ScanChaos_FullMethodName                    = "/service.UserService/ScanChaos"
	UserService_GetChaosScanResultsByDomain_FullMethodName  = "/service.UserService/GetChaosScanResultsByDomain"
	UserService_ScanShodan_FullMethodName                   = "/service.UserService/ScanShodan"
	UserService_GetShodanScanResultsByDomain_FullMethodName = "/service.UserService/GetShodanScanResultsByDomain"
	UserService_ScanOTX_FullMethodName                      = "/service.UserService/ScanOTX"
	UserService_GetOTXScanResultsByDomain_FullMethodName    = "/service.UserService/GetOTXScanResultsByDomain"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// User Service: Core user management RPCs
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error)
	InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error)
	ValidateInvite(ctx context.Context, in *ValidateInviteRequest, opts ...grpc.CallOption) (*ValidateInviteResponse, error)
	// DNS Scan Plugin
	ScanDomain(ctx context.Context, in *ScanDomainRequest, opts ...grpc.CallOption) (*ScanDomainResponse, error)
	GetDNSScanResultsByDomain(ctx context.Context, in *GetDNSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetDNSScanResultsByDomainResponse, error)
	// TLS Scan Plugin
	ScanTLS(ctx context.Context, in *ScanTLSRequest, opts ...grpc.CallOption) (*ScanTLSResponse, error)
	GetTLSScanResultsByDomain(ctx context.Context, in *GetTLSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetTLSScanResultsByDomainResponse, error)
	// CrtSh Scan Plugin
	ScanCrtSh(ctx context.Context, in *ScanCrtShRequest, opts ...grpc.CallOption) (*ScanCrtShResponse, error)
	GetCrtShScanResultsByDomain(ctx context.Context, in *GetCrtShScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetCrtShScanResultsByDomainResponse, error)
	// Chaos Scan Plugin
	ScanChaos(ctx context.Context, in *ScanChaosRequest, opts ...grpc.CallOption) (*ScanChaosResponse, error)
	GetChaosScanResultsByDomain(ctx context.Context, in *GetChaosScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetChaosScanResultsByDomainResponse, error)
	// Shodan Scan Plugin
	ScanShodan(ctx context.Context, in *ScanShodanRequest, opts ...grpc.CallOption) (*ScanShodanResponse, error)
	GetShodanScanResultsByDomain(ctx context.Context, in *GetShodanScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetShodanScanResultsByDomainResponse, error)
	// OTX Scan Plugin
	ScanOTX(ctx context.Context, in *ScanOTXRequest, opts ...grpc.CallOption) (*ScanOTXResponse, error)
	GetOTXScanResultsByDomain(ctx context.Context, in *GetOTXScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetOTXScanResultsByDomainResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...grpc.CallOption) (*ListUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ListUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) InviteUser(ctx context.Context, in *InviteUserRequest, opts ...grpc.CallOption) (*InviteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviteUserResponse)
	err := c.cc.Invoke(ctx, UserService_InviteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ValidateInvite(ctx context.Context, in *ValidateInviteRequest, opts ...grpc.CallOption) (*ValidateInviteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateInviteResponse)
	err := c.cc.Invoke(ctx, UserService_ValidateInvite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanDomain(ctx context.Context, in *ScanDomainRequest, opts ...grpc.CallOption) (*ScanDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanDomainResponse)
	err := c.cc.Invoke(ctx, UserService_ScanDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetDNSScanResultsByDomain(ctx context.Context, in *GetDNSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetDNSScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDNSScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetDNSScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanTLS(ctx context.Context, in *ScanTLSRequest, opts ...grpc.CallOption) (*ScanTLSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanTLSResponse)
	err := c.cc.Invoke(ctx, UserService_ScanTLS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetTLSScanResultsByDomain(ctx context.Context, in *GetTLSScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetTLSScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTLSScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetTLSScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanCrtSh(ctx context.Context, in *ScanCrtShRequest, opts ...grpc.CallOption) (*ScanCrtShResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanCrtShResponse)
	err := c.cc.Invoke(ctx, UserService_ScanCrtSh_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetCrtShScanResultsByDomain(ctx context.Context, in *GetCrtShScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetCrtShScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCrtShScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetCrtShScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanChaos(ctx context.Context, in *ScanChaosRequest, opts ...grpc.CallOption) (*ScanChaosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanChaosResponse)
	err := c.cc.Invoke(ctx, UserService_ScanChaos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetChaosScanResultsByDomain(ctx context.Context, in *GetChaosScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetChaosScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChaosScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetChaosScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanShodan(ctx context.Context, in *ScanShodanRequest, opts ...grpc.CallOption) (*ScanShodanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanShodanResponse)
	err := c.cc.Invoke(ctx, UserService_ScanShodan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetShodanScanResultsByDomain(ctx context.Context, in *GetShodanScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetShodanScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetShodanScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetShodanScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ScanOTX(ctx context.Context, in *ScanOTXRequest, opts ...grpc.CallOption) (*ScanOTXResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ScanOTXResponse)
	err := c.cc.Invoke(ctx, UserService_ScanOTX_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetOTXScanResultsByDomain(ctx context.Context, in *GetOTXScanResultsByDomainRequest, opts ...grpc.CallOption) (*GetOTXScanResultsByDomainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOTXScanResultsByDomainResponse)
	err := c.cc.Invoke(ctx, UserService_GetOTXScanResultsByDomain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
//
// User Service: Core user management RPCs
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error)
	ValidateInvite(context.Context, *ValidateInviteRequest) (*ValidateInviteResponse, error)
	// DNS Scan Plugin
	ScanDomain(context.Context, *ScanDomainRequest) (*ScanDomainResponse, error)
	GetDNSScanResultsByDomain(context.Context, *GetDNSScanResultsByDomainRequest) (*GetDNSScanResultsByDomainResponse, error)
	// TLS Scan Plugin
	ScanTLS(context.Context, *ScanTLSRequest) (*ScanTLSResponse, error)
	GetTLSScanResultsByDomain(context.Context, *GetTLSScanResultsByDomainRequest) (*GetTLSScanResultsByDomainResponse, error)
	// CrtSh Scan Plugin
	ScanCrtSh(context.Context, *ScanCrtShRequest) (*ScanCrtShResponse, error)
	GetCrtShScanResultsByDomain(context.Context, *GetCrtShScanResultsByDomainRequest) (*GetCrtShScanResultsByDomainResponse, error)
	// Chaos Scan Plugin
	ScanChaos(context.Context, *ScanChaosRequest) (*ScanChaosResponse, error)
	GetChaosScanResultsByDomain(context.Context, *GetChaosScanResultsByDomainRequest) (*GetChaosScanResultsByDomainResponse, error)
	// Shodan Scan Plugin
	ScanShodan(context.Context, *ScanShodanRequest) (*ScanShodanResponse, error)
	GetShodanScanResultsByDomain(context.Context, *GetShodanScanResultsByDomainRequest) (*GetShodanScanResultsByDomainResponse, error)
	// OTX Scan Plugin
	ScanOTX(context.Context, *ScanOTXRequest) (*ScanOTXResponse, error)
	GetOTXScanResultsByDomain(context.Context, *GetOTXScanResultsByDomainRequest) (*GetOTXScanResultsByDomainResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedUserServiceServer) InviteUser(context.Context, *InviteUserRequest) (*InviteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteUser not implemented")
}
func (UnimplementedUserServiceServer) ValidateInvite(context.Context, *ValidateInviteRequest) (*ValidateInviteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateInvite not implemented")
}
func (UnimplementedUserServiceServer) ScanDomain(context.Context, *ScanDomainRequest) (*ScanDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanDomain not implemented")
}
func (UnimplementedUserServiceServer) GetDNSScanResultsByDomain(context.Context, *GetDNSScanResultsByDomainRequest) (*GetDNSScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDNSScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanTLS(context.Context, *ScanTLSRequest) (*ScanTLSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanTLS not implemented")
}
func (UnimplementedUserServiceServer) GetTLSScanResultsByDomain(context.Context, *GetTLSScanResultsByDomainRequest) (*GetTLSScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTLSScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanCrtSh(context.Context, *ScanCrtShRequest) (*ScanCrtShResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanCrtSh not implemented")
}
func (UnimplementedUserServiceServer) GetCrtShScanResultsByDomain(context.Context, *GetCrtShScanResultsByDomainRequest) (*GetCrtShScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrtShScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanChaos(context.Context, *ScanChaosRequest) (*ScanChaosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanChaos not implemented")
}
func (UnimplementedUserServiceServer) GetChaosScanResultsByDomain(context.Context, *GetChaosScanResultsByDomainRequest) (*GetChaosScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChaosScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanShodan(context.Context, *ScanShodanRequest) (*ScanShodanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShodan not implemented")
}
func (UnimplementedUserServiceServer) GetShodanScanResultsByDomain(context.Context, *GetShodanScanResultsByDomainRequest) (*GetShodanScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShodanScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) ScanOTX(context.Context, *ScanOTXRequest) (*ScanOTXResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanOTX not implemented")
}
func (UnimplementedUserServiceServer) GetOTXScanResultsByDomain(context.Context, *GetOTXScanResultsByDomainRequest) (*GetOTXScanResultsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOTXScanResultsByDomain not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ListUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUsers(ctx, req.(*ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_InviteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).InviteUser(ctx, req.(*InviteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ValidateInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateInviteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ValidateInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ValidateInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ValidateInvite(ctx, req.(*ValidateInviteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanDomain(ctx, req.(*ScanDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetDNSScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDNSScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetDNSScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetDNSScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetDNSScanResultsByDomain(ctx, req.(*GetDNSScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanTLS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanTLSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanTLS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanTLS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanTLS(ctx, req.(*ScanTLSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetTLSScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTLSScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetTLSScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetTLSScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetTLSScanResultsByDomain(ctx, req.(*GetTLSScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanCrtSh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanCrtShRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanCrtSh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanCrtSh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanCrtSh(ctx, req.(*ScanCrtShRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetCrtShScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCrtShScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetCrtShScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetCrtShScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetCrtShScanResultsByDomain(ctx, req.(*GetCrtShScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanChaos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanChaosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanChaos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanChaos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanChaos(ctx, req.(*ScanChaosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetChaosScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChaosScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetChaosScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetChaosScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetChaosScanResultsByDomain(ctx, req.(*GetChaosScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanShodan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanShodanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanShodan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanShodan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanShodan(ctx, req.(*ScanShodanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetShodanScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShodanScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetShodanScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetShodanScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetShodanScanResultsByDomain(ctx, req.(*GetShodanScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ScanOTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanOTXRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ScanOTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ScanOTX_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ScanOTX(ctx, req.(*ScanOTXRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetOTXScanResultsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOTXScanResultsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetOTXScanResultsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_GetOTXScanResultsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetOTXScanResultsByDomain(ctx, req.(*GetOTXScanResultsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _UserService_ListUsers_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _UserService_InviteUser_Handler,
		},
		{
			MethodName: "ValidateInvite",
			Handler:    _UserService_ValidateInvite_Handler,
		},
		{
			MethodName: "ScanDomain",
			Handler:    _UserService_ScanDomain_Handler,
		},
		{
			MethodName: "GetDNSScanResultsByDomain",
			Handler:    _UserService_GetDNSScanResultsByDomain_Handler,
		},
		{
			MethodName: "ScanTLS",
			Handler:    _UserService_ScanTLS_Handler,
		},
		{
			MethodName: "GetTLSScanResultsByDomain",
			Handler:    _UserService_GetTLSScanResultsByDomain_Handler,
		},
		{
			MethodName: "ScanCrtSh",
			Handler:    _UserService_ScanCrtSh_Handler,
		},
		{
			MethodName: "GetCrtShScanResultsByDomain",
			Handler:    _UserService_GetCrtShScanResultsByDomain_Handler,
		},
		{
			MethodName: "ScanChaos",
			Handler:    _UserService_ScanChaos_Handler,
		},
		{
			MethodName: "GetChaosScanResultsByDomain",
			Handler:    _UserService_GetChaosScanResultsByDomain_Handler,
		},
		{
			MethodName: "ScanShodan",
			Handler:    _UserService_ScanShodan_Handler,
		},
		{
			MethodName: "GetShodanScanResultsByDomain",
			Handler:    _UserService_GetShodanScanResultsByDomain_Handler,
		},
		{
			MethodName: "ScanOTX",
			Handler:    _UserService_ScanOTX_Handler,
		},
		{
			MethodName: "GetOTXScanResultsByDomain",
			Handler:    _UserService_GetOTXScanResultsByDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
